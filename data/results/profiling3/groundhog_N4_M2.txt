
Removing groundhog_server_5 ... 
Removing groundhog_server_3 ... 
Removing groundhog_server_4 ... 
Removing groundhog_server_2 ... 
Removing groundhog_server_1 ... 
Removing groundhog_server_7 ... 
Removing groundhog_server_6 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_uptime_1 ... done
Removing groundhog_server_1 ... done
Removing groundhog_server_7 ... done
Removing groundhog_server_5 ... done
Removing groundhog_server_2 ... done
Removing groundhog_server_4 ... done
Removing groundhog_client_1 ... done
Removing groundhog_server_3 ... done
Removing groundhog_server_6 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.92MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Running in 4214be3edb41
Removing intermediate container 4214be3edb41
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_1 ... done
Creating groundhog_server_2 ... done
Creating groundhog_server_3 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_1, groundhog_server_2, groundhog_server_3
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
[36mclient_1  |[0m Net            n:4  m:2   t:100000     enc/s:13844.7   ms/enc:0.07223 	  Mbps:3.32272 Aborts = 0 Time (ms) = 7223
[32mserver_2  |[0m Going up
[35mserver_3  |[0m Going up
[36mclient_1  |[0m ---- OPRF-Preparation-Times	Mean:3.93762	Std Deviation:2.04015
[33mserver_1  |[0m Going up
[36mclient_1  |[0m ---- OPRF-Send-Times	Mean:7.75928e-06	Std Deviation:3.1424e-05
[36mclient_1  |[0m ---- OPRF-Receive-Times	Mean:9.42403e-07	Std Deviation:4.14168e-06
[36mclient_1  |[0m ---- OPRF-Combine-Times	Mean:3.07732e-07	Std Deviation:2.54629e-06
[36mgroundhog_client_1 exited with code 0
[0mStopping groundhog_server_2 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_2 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_2 ... 
Removing groundhog_server_3 ... 
Removing groundhog_server_1 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_server_1 ... done
Removing groundhog_server_2 ... done
Removing groundhog_server_3 ... done
Removing groundhog_uptime_1 ... done
Removing groundhog_client_1 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.93MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_1 ... done
Creating groundhog_server_3 ... done
Creating groundhog_server_2 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_1, groundhog_server_3, groundhog_server_2
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
[32mserver_2  |[0m Going up
[36mclient_1  |[0m Net            n:4  m:2   t:100000     enc/s:12664.6   ms/enc:0.07896 	  Mbps:3.03951 Aborts = 0 Time (ms) = 7896
[35mserver_3  |[0m Going up
[33mserver_1  |[0m Going up
[36mclient_1  |[0m ---- OPRF-Preparation-Times	Mean:4.56968	Std Deviation:2.22645
[36mclient_1  |[0m ---- OPRF-Send-Times	Mean:8.72324e-06	Std Deviation:2.43998e-05
[36mclient_1  |[0m ---- OPRF-Receive-Times	Mean:1.07047e-06	Std Deviation:5.1408e-06
[36mclient_1  |[0m ---- OPRF-Combine-Times	Mean:3.46525e-07	Std Deviation:2.34674e-06
[36mgroundhog_client_1 exited with code 0
[0mStopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_3 ... 
Removing groundhog_server_2 ... 
Removing groundhog_server_1 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_server_3 ... done
Removing groundhog_server_2 ... done
Removing groundhog_client_1 ... done
Removing groundhog_uptime_1 ... done
Removing groundhog_server_1 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.93MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_3 ... done
Creating groundhog_server_2 ... done
Creating groundhog_server_1 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_3, groundhog_server_2, groundhog_server_1
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_2 ... 
Removing groundhog_server_1 ... 
Removing groundhog_server_3 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_uptime_1 ... done
Removing groundhog_client_1 ... done
Removing groundhog_server_2 ... done
Removing groundhog_server_3 ... done
Removing groundhog_server_1 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.94MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_3 ... done
Creating groundhog_server_2 ... done
Creating groundhog_server_1 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_3, groundhog_server_2, groundhog_server_1
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_1 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_1 ... 
Removing groundhog_server_2 ... 
Removing groundhog_server_3 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_uptime_1 ... done
Removing groundhog_server_1 ... done
Removing groundhog_server_3 ... done
Removing groundhog_server_2 ... done
Removing groundhog_client_1 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.94MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_1 ... done
Creating groundhog_server_2 ... done
Creating groundhog_server_3 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_1, groundhog_server_2, groundhog_server_3
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_3 ... 
Removing groundhog_server_2 ... 
Removing groundhog_server_1 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_client_1 ... done
Removing groundhog_uptime_1 ... done
Removing groundhog_server_3 ... done
Removing groundhog_server_1 ... done
Removing groundhog_server_2 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.94MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_2 ... done
Creating groundhog_server_1 ... done
Creating groundhog_server_3 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_2, groundhog_server_1, groundhog_server_3
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_3 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_3 ... 
Removing groundhog_server_1 ... 
Removing groundhog_server_2 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_client_1 ... done
Removing groundhog_uptime_1 ... done
Removing groundhog_server_1 ... done
Removing groundhog_server_2 ... done
Removing groundhog_server_3 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.95MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_2 ... done
Creating groundhog_server_1 ... done
Creating groundhog_server_3 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_2, groundhog_server_1, groundhog_server_3
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_1 ... 
Removing groundhog_server_3 ... 
Removing groundhog_server_2 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_server_1 ... done
Removing groundhog_server_2 ... done
Removing groundhog_server_3 ... done
Removing groundhog_client_1 ... done
Removing groundhog_uptime_1 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.95MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_1 ... done
Creating groundhog_server_3 ... done
Creating groundhog_server_2 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_1, groundhog_server_3, groundhog_server_2
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_2 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_3 ... 
Removing groundhog_server_2 ... 
Removing groundhog_server_1 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_uptime_1 ... done
Removing groundhog_client_1 ... done
Removing groundhog_server_3 ... done
Removing groundhog_server_2 ... done
Removing groundhog_server_1 ... done
Removing network groundhog_dise-net
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  30.96MB
Step 1/13 : FROM alpine:3.15
 ---> 32b91e3161c8
Step 2/13 : WORKDIR /usr/local/src
 ---> Using cache
 ---> 5d60584c7077
Step 3/13 : COPY ./cryptoTools ./cryptoTools
 ---> Using cache
 ---> 097cf5c44dee
Step 4/13 : RUN apk add git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev  && cd cryptoTools  && rm -f cryptoTools/Common/config.h  && python3 build.py --setup --relic -DFETCH_BOOST=OFF  && python3 build.py -DENABLE_RELIC=ON  && python3 build.py --install  && cd ..  && rm -rf cryptoTools  && apk del git gcc g++ make cmake bash openssl-dev boost1.77-static boost1.77-dev
 ---> Using cache
 ---> f449807f8e39
Step 5/13 : RUN apk add git gcc g++ make cmake libstdc++ openssl-dev boost1.77-static boost1.77-dev python3 linux-tools
 ---> Using cache
 ---> 26fdf03df6ef
Step 6/13 : RUN echo initial git build  && git clone "https://github.com/synercys/htdise" repo  && mv repo/DiSE .  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc` || echo "GitHub build failed! Continuing..."
 ---> Using cache
 ---> de135c817573
Step 7/13 : COPY ./DiSE ./DiSE
 ---> Using cache
 ---> 275810352985
Step 8/13 : RUN echo incremental build  && cd DiSE  && cmake . -Wno-dev  && make -j `nproc`  && cp -r bin /usr/local
 ---> Using cache
 ---> a835baf3d624
Step 9/13 : WORKDIR /usr/local
 ---> Using cache
 ---> 94888501f72f
Step 10/13 : COPY restart.py uptime_server.py /usr/local/bin/
 ---> Using cache
 ---> 5e2a6e3e0e43
Step 11/13 : COPY data/state.txt /usr/local
 ---> Using cache
 ---> 26463413267a
Step 12/13 : COPY default.json /usr/local
 ---> Using cache
 ---> 86b627202570
Step 13/13 : CMD ["/usr/local/bin/dEncFrontend", "-u"]
 ---> Using cache
 ---> 30b6333ad0f5
Successfully built 30b6333ad0f5
Successfully tagged groundhog:latest
Creating network "groundhog_dise-net" with driver "bridge"
Creating groundhog_uptime_1 ... 
Creating groundhog_uptime_1 ... done
Creating groundhog_client_1 ... 
Creating groundhog_client_1 ... done
Creating groundhog_server_1 ... 
Creating groundhog_server_2 ... 
Creating groundhog_server_3 ... 
Creating groundhog_server_3 ... done
Creating groundhog_server_1 ... done
Creating groundhog_server_2 ... done
Attaching to groundhog_uptime_1, groundhog_client_1, groundhog_server_3, groundhog_server_1, groundhog_server_2
[36mclient_1  |[0m Application Start /usr/local/src/DiSE/test/Helloworld.cpp 185
[36mclient_1  |[0m My IP is 10.0.0.2, my idx is 0
[36mclient_1  |[0m Key exchange done. Starting  benchmark.
[36mclient_1  |[0m ---- Size of Plain Text = 24 Number of Trials = 100000
Stopping groundhog_server_2 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_2 ... 
Stopping groundhog_server_3 ... 
Stopping groundhog_server_1 ... 
Stopping groundhog_client_1 ... 
Stopping groundhog_uptime_1 ... 
Stopping groundhog_server_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_server_1 ... done
Stopping groundhog_server_2 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_server_3 ... done
Stopping groundhog_client_1 ... done
Stopping groundhog_uptime_1 ... done
Stopping groundhog_uptime_1 ... done
Gracefully stopping... (press Ctrl+C again to force)
Removing groundhog_server_2 ... 
Removing groundhog_server_3 ... 
Removing groundhog_server_1 ... 
Removing groundhog_client_1 ... 
Removing groundhog_uptime_1 ... 
Removing groundhog_server_3 ... done
Removing groundhog_uptime_1 ... done
Removing groundhog_server_1 ... done
Removing groundhog_server_2 ... done
Removing groundhog_client_1 ... done
Removing network groundhog_dise-net
